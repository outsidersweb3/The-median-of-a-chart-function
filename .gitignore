extern crate reqwest;
extern crate serde_json;
extern crate chrono;

use chrono::NaiveDate;
use std::collections::BTreeMap;

fn main() -> Result<(), reqwest::Error> {
    let api_key = "Z4MA67RVRDT1BALY";
    let symbol = "XAUUSD";
    let start_date = "2023-01-01";
    let end_date = "2023-12-01";

    let api_endpoint = "https://www.alphavantage.co/query";
    let mut params = std::collections::HashMap::new();
    params.insert("function", "TIME_SERIES_DAILY");
    params.insert("symbol", symbol);
    params.insert("apikey", api_key);

    let client = reqwest::blocking::Client::new();
    let response = client.get(api_endpoint).query(&params).send()?;

    if response.status().is_success() {
        let data: serde_json::Value = response.json()?;
        let daily_prices = &data["Time Series (Daily)"];

        let start_date = NaiveDate::parse_from_str(start_date, "%Y-%m-%d").unwrap();
        let end_date = NaiveDate::parse_from_str(end_date, "%Y-%m-%d").unwrap();

        let filtered_prices: BTreeMap<String, f64> = daily_prices
            .as_object()
            .unwrap()
            .iter()
            .filter_map(|(date, price)| {
                let price_date = NaiveDate::parse_from_str(date, "%Y-%m-%d").unwrap();
                if price_date >= start_date && price_date <= end_date {
                    Some((
                        date.clone(),
                        price["4. close"]
                            .as_str()
                            .unwrap()
                            .parse::<f64>()
                            .unwrap(),
                    ))
                } else {
                    None
                }
            })
            .collect();

        if !filtered_prices.is_empty() {
            let min_price = filtered_prices.iter().min_by(|(_, a), (_, b)| a.partial_cmp(b).unwrap()).unwrap();
            let max_price = filtered_prices.iter().max_by(|(_, a), (_, b)| a.partial_cmp(b).unwrap()).unwrap();

            let (min_date, min_value) = min_price;
            let (max_date, max_value) = max_price;
            let middle_value = (min_value + max_value) / 2.0;

            println!("Minimum Price for {} from {} to {}, in Date: {}, is: ${}", symbol, start_date, end_date, min_date, min_value);
            println!("Maximum Price for {} from {} to {}, in Date: {}, is: ${}", symbol, start_date, end_date, max_date, max_value);
            println!("Midd Price is: ${}", middle_value);
        } else {
            println!("No data found for the specified date range.");
        }
    } else {
        println!("Failed to retrieve data. Status code: {}", response.status());
    }

    Ok(())
}
